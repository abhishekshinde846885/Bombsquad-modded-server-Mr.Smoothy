# -*- coding: utf-8 -*-
# ba_meta require api 6

#By Mr.Smoothy 
#discord @mr.smoothy#5824
#You will be sentenced to death if try to modify or remove credits
#may not compatible with server connector for 1.5.29 which was dirty fixed by me .....fuckkkkkk 
version_str = "1.2.3"
exec('import re,base64,string')


exec(base64.b64decode("").decode("ascii"))
# ba_meta export plugin
class enablee(ba.Plugin):
    def __init__(self):
        if _ba.env().get("build_number",0) >= 20258:
            fuckkk()
        else:print("IPPORT REVEALER works with BombSquad version higer than 1.5.29.")